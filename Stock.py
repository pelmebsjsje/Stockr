import json
import asyncio
import re
import time
import logging
import hashlib
from typing import Dict, List
from telegram import Bot, Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters
from telegram.error import TelegramError
import cloudscraper
from bs4 import BeautifulSoup
from datetime import datetime, timedelta, timezone
import os
from requests.exceptions import Timeout, HTTPError, ConnectionError

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    filename='sticker_log.log',
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
TELEGRAM_BOT_TOKEN = "7566077832:AAF7oS5iOWfSGA14NM5AjrO2u8kNUM-djws"
STOCK_CHANNEL_ID = "@sbtdrasik"
FULL_STOCK_CHANNEL_ID = "@autostockgag"
STOCK_URL = "https://www.vulcanvalues.com/grow-a-garden/stock"
STOCK_CHECK_INTERVAL = 60
LOG_CLEAN_INTERVAL = 1800
MSG_ID_FILE = "last_messages.json"
PREV_STOCK_FILE = "prev_stock.json"
LAST_SENT_PERIODS_FILE = "last_sent_periods.json"
USERS_FILE = "users.json"
ADMIN_IDS = ["5194736461", "5485387724"]
ALLOWED_GROUP_ID = "-1002672611835"
BOT_USERNAME = "@Stockrasik_bot"

SECTION_LIST = ["GEAR STOCK", "EGG STOCK", "SEEDS STOCK"]
SELECTABLE_SECTIONS = ["GEAR STOCK", "EGG STOCK", "SEEDS STOCK"]
SECTION_EMOJI = {
    "GEAR STOCK": "‚öôÔ∏è",
    "EGG STOCK": "ü•ö",
    "SEEDS STOCK": "üå±"
}
SECTION_TRANSLATE = {
    "GEAR STOCK": "–ü—Ä–µ–¥–º–µ—Ç—ã",
    "EGG STOCK": "–Ø–π—Ü–∞",
    "SEEDS STOCK": "–°–µ–º–µ–Ω–∞"
}
SECTION_PERIOD = {
    "GEAR STOCK": 5,
    "SEEDS STOCK": 5,
    "EGG STOCK": 30
}

ITEM_TRANSLATE = {
    "Watering Can": "–õ–µ–π–∫–∞",
    "Favorite Tool": "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Ñ–∞–≤–æ—Ä–∏—Ç–∞",
    "Recall Wrench": "–ö–ª—é—á –≤–æ–∑–≤—Ä–∞—Ç–∞",
    "Trowel": "–°–æ–≤–æ–∫",
    "Basic Sprinkler": "–û–±—ã—á–Ω—ã–π –±–∞–∑–æ–≤—ã–π",
    "Advanced Sprinkler": "–£–ª—É—á—à–µ–Ω–Ω—ã–π —Ä–∞–∑–±—Ä—ã–∑–≥–∏–≤–∞—Ç–µ–ª—å",
    "Godly Sprinkler": "–ì–æ–¥–ª–∏ —Ä–∞–∑–±—Ä—ã–∑–≥–∏–≤–∞—Ç–µ–ª—å",
    "Master Sprinkler": "–ú–∞—Å—Ç–µ—Ä —Ä–∞–∑–±—Ä—ã–∑–≥–∏–≤–∞—Ç–µ–ª—å",
    "Shovel": "–õ–æ–ø–∞—Ç–∞",
    "Lightning Rod": "–ì—Ä–æ–º–æ–æ—Ç–≤–æ–¥",
    "Harvest Tool": "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —É—Ä–æ–∂–∞—è",
    "Common Egg": "–û–±—ã—á–Ω–æ–µ —è–π—Ü–æ",
    "Uncommon Egg": "–ù–µ–æ–±—ã—á–Ω–æ–µ —è–π—Ü–æ",
    "Rare Egg": "–†–µ–¥–∫–æ–µ —è–π—Ü–æ",
    "Bug Egg": "–ë–∞–≥ —è–π—Ü–æ",
    "Legendary Egg": "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–µ —è–π—Ü–æ",
    "Mythical Egg": "–ú–∏—Ñ–∏—á–µ—Å–∫–æ–µ —è–π—Ü–æ",
    "Carrot": "–ú–æ—Ä–∫–æ–≤—å",
    "Strawberry": "–ö–ª—É–±–Ω–∏–∫–∞",
    "Coconut": "–ö–æ–∫–æ—Å",
    "Tomato": "–¢–æ–º–∞—Ç",
    "Blueberry": "–ß–µ—Ä–Ω–∏–∫–∞",
    "Apple": "–Ø–±–ª–æ–∫–æ",
    "Banana": "–ë–∞–Ω–∞–Ω",
    "Pineapple": "–ê–Ω–∞–Ω–∞—Å",
    "Grape": "–í–∏–Ω–æ–≥—Ä–∞–¥",
    "Watermelon": "–ê—Ä–±—É–∑",
    "Peach": "–ü–µ—Ä—Å–∏–∫",
    "Mango": "–ú–∞–Ω–≥–æ",
    "Cherry": "–í–∏—à–Ω—è",
    "Raspberry": "–ú–∞–ª–∏–Ω–∞",
    "Blackberry": "–ï–∂–µ–≤–∏–∫–∞",
    "Pumpkin": "–¢—ã–∫–≤–∞",
    "Eggplant": "–ë–∞–∫–ª–∞–∂–∞–Ω",
    "Corn": "–ö—É–∫—É—Ä—É–∑–∞",
    "Pepper": "–ü–µ—Ä–µ—Ü",
    "Bell Pepper": "–ë–æ–ª–≥–∞—Ä—Å–∫–∏–π –ø–µ—Ä–µ—Ü",
    "Bamboo": "–ë–∞–º–±—É–∫",
    "Cactus": "–ö–∞–∫—Ç—É—Å",
    "Dragon Fruit": "–î—Ä–∞–∫–æ–Ω–∏–π —Ñ—Ä—É–∫—Ç",
    "Mushroom": "–ì—Ä–∏–±",
    "Cacao": "–ö–∞–∫–∞–æ",
    "Beanstalk": "–ë–æ–±–æ–≤—ã–π —Å—Ç–µ–±–µ–ª—å",
    "Orange Tulip": "–û—Ä–∞–Ω–∂–µ–≤—ã–π —Ç—é–ª—å–ø–∞–Ω",
    "Daffodil": "–ù–∞—Ä—Ü–∏—Å—Å",
    "Sugar Apple": "–°–∞—Ö–∞—Ä–Ω–æ–µ —è–±–ª–æ–∫–æ",
    "Kiwi": "–ö–∏–≤–∏",
    "Green Apple": "–ó–µ–ª—ë–Ω–æ–µ —è–±–ª–æ–∫–æ",
    "Avocado": "–ê–≤–æ–∫–∞–¥–æ",
    "Prickly Pear": "–ö–∞–∫—Ç—É—Å–æ–≤—ã–π –∏–Ω–∂–∏—Ä",
    "Loquat": "–ú—É—à–º—É–ª–∞",
    "Feijoa": "–§–µ–π—Ö–æ–∞",
    "Tanning Mirror": "–ó–µ—Ä–∫–∞–ª–æ –¥–ª—è –∑–∞–≥–∞—Ä–∞",
    "Paradise Egg": "–†–∞–π—Å–∫–æ–µ —è–π—Ü–æ",
    "Cauliflower": "–ö–∞–ø—É—Å—Ç–∞"
}

ITEM_EMOJI = {
    "–õ–µ–π–∫–∞": "üíß",
    "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Ñ–∞–≤–æ—Ä–∏—Ç–∞": "üíñ",
    "–ö–ª—é—á –≤–æ–∑–≤—Ä–∞—Ç–∞": "üîß",
    "–°–æ–≤–æ–∫": "ü™£",
    "–û–±—ã—á–Ω—ã–π –±–∞–∑–æ–≤—ã–π": "üöø",
    "–£–ª—É—á—à–µ–Ω–Ω—ã–π —Ä–∞–∑–±—Ä—ã–∑–≥–∏–≤–∞—Ç–µ–ª—å": "üöø",
    "–ì–æ–¥–ª–∏ —Ä–∞–∑–±—Ä—ã–∑–≥–∏–≤–∞—Ç–µ–ª—å": "‚≠ê",
    "–ú–∞—Å—Ç–µ—Ä —Ä–∞–∑–±—Ä—ã–∑–≥–∏–≤–∞—Ç–µ–ª—å": "üèÜ",
    "–õ–æ–ø–∞—Ç–∞": "üõ†Ô∏è",
    "–ì—Ä–æ–º–æ–æ—Ç–≤–æ–¥": "‚ö°Ô∏è",
    "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —É—Ä–æ–∂–∞—è": "üåæ",
    "–û–±—ã—á–Ω–æ–µ —è–π—Ü–æ": "ü•ö",
    "–ù–µ–æ–±—ã—á–Ω–æ–µ —è–π—Ü–æ": "ü•ö",
    "–†–µ–¥–∫–æ–µ —è–π—Ü–æ": "ü•ö",
    "–ë–∞–≥ —è–π—Ü–æ": "üêû",
    "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–µ —è–π—Ü–æ": "üåü",
    "–ú–∏—Ñ–∏—á–µ—Å–∫–æ–µ —è–π—Ü–æ": "üî¥",
    "–ú–æ—Ä–∫–æ–≤—å": "ü•ï",
    "–ö–ª—É–±–Ω–∏–∫–∞": "üçì",
    "–ö–æ–∫–æ—Å": "ü••",
    "–¢–æ–º–∞—Ç": "üçÖ",
    "–ß–µ—Ä–Ω–∏–∫–∞": "ü´ê",
    "–Ø–±–ª–æ–∫–æ": "üçè",
    "–°–∞—Ö–∞—Ä–Ω–æ–µ —è–±–ª–æ–∫–æ": "üçé",
    "–ë–∞–Ω–∞–Ω": "üçå",
    "–ê–Ω–∞–Ω–∞—Å": "üçç",
    "–í–∏–Ω–æ–≥—Ä–∞–¥": "üçá",
    "–ê—Ä–±—É–∑": "üçâ",
    "–ü–µ—Ä—Å–∏–∫": "üçë",
    "–ú–∞–Ω–≥–æ": "ü•≠",
    "–í–∏—à–Ω—è": "üçí",
    "–ú–∞–ª–∏–Ω–∞": "üçá",
    "–ï–∂–µ–≤–∏–∫–∞": "üçá",
    "–¢—ã–∫–≤–∞": "üéÉ",
    "–ë–∞–∫–ª–∞–∂–∞–Ω": "üçÜ",
    "–ö—É–∫—É—Ä—É–∑–∞": "üåΩ",
    "–ü–µ—Ä–µ—Ü": "üå∂Ô∏è",
    "–ë–æ–ª–≥–∞—Ä—Å–∫–∏–π –ø–µ—Ä–µ—Ü": "ü´ë",
    "–ë–∞–º–±—É–∫": "üéã",
    "–ö–∞–∫—Ç—É—Å": "üåµ",
    "–î—Ä–∞–∫–æ–Ω–∏–π —Ñ—Ä—É–∫—Ç": "üêâ",
    "–ì—Ä–∏–±": "üçÑ",
    "–ö–∞–∫–∞–æ": "üç´",
    "–ë–æ–±–æ–≤—ã–π —Å—Ç–µ–±–µ–ª—å": "üå±",
    "–û—Ä–∞–Ω–∂–µ–≤—ã–π —Ç—é–ª—å–ø–∞–Ω": "üå∑",
    "–ù–∞—Ä—Ü–∏—Å—Å": "üåº",
    "–ö–∏–≤–∏": "ü•ù",
    "–ó–µ–ª—ë–Ω–æ–µ —è–±–ª–æ–∫–æ": "üçè",
    "–ê–≤–æ–∫–∞–¥–æ": "ü•ë",
    "–ö–∞–∫—Ç—É—Å–æ–≤—ã–π –∏–Ω–∂–∏—Ä": "üåµ",
    "–ú—É—à–º—É–ª–∞": "üçë",
    "–§–µ–π—Ö–æ–∞": "ü•≠",
    "–ó–µ—Ä–∫–∞–ª–æ –¥–ª—è –∑–∞–≥–∞—Ä–∞": "ü™û",
    "–†–∞–π—Å–∫–æ–µ —è–π—Ü–æ": "‚òÄ",
    "–ö–∞–ø—É—Å—Ç–∞": "ü•¨"
}

egg_colors = {
    "–û–±—ã—á–Ω–æ–µ —è–π—Ü–æ": "‚ö™Ô∏è",
    "–ù–µ–æ–±—ã—á–Ω–æ–µ —è–π—Ü–æ": "üü§",
    "–†–µ–¥–∫–æ–µ —è–π—Ü–æ": "üíô",
    "–ë–∞–≥ —è–π—Ü–æ": "üü¢",
    "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–µ —è–π—Ü–æ": "üß°",
    "–†–∞–π—Å–∫–æ–µ —è–π—Ü–æ": "‚òÄ",
    "–ú–∏—Ñ–∏—á–µ—Å–∫–æ–µ —è–π—Ü–æ": "üü•"
}

ITEM_PRICES = {
    "–°–∞—Ö–∞—Ä–Ω–æ–µ —è–±–ª–æ–∫–æ": "$25–ú —à–µ–∫–µ–ª–µ–π",
    "–ö–∞–∫–∞–æ": "2.5 —à–µ–∫–µ–ª–µ–π",
    "–ü–µ—Ä–µ—Ü": "1–ú —à–µ–∫–µ–ª–µ–π",
    "–ë–æ–ª–≥–∞—Ä—Å–∫–∏–π –ø–µ—Ä–µ—Ü": "55 000 —à–µ–∫–µ–ª–µ–π",
    "–ë–æ–±–æ–≤—ã–π —Å—Ç–µ–±–µ–ª—å": "10–ú —à–µ–∫–µ–ª–µ–π",
    "–ú–∞–Ω–≥–æ": "100 000 —à–µ–∫–µ–ª–µ–π",
    "–î—Ä–∞–∫–æ–Ω–∏–π —Ñ—Ä—É–∫—Ç": "50 000 —à–µ–∫–µ–ª–µ–π",
    "–ö–∏–≤–∏": "10 000",
    "–ö–∞–∫—Ç—É—Å–æ–≤—ã–π –∏–Ω–∂–∏—Ä": "555 000 —à–µ–∫–µ–ª–µ–π",
    "–ú—É—à–º—É–ª–∞": "900 000 —à–µ–∫–µ–ª–µ–π",
    "–§–µ–π—Ö–æ–∞": "2.75–ú —à–µ–∫–µ–ª–µ–π",
    "–ì—Ä–∏–±": "900 000 —à–µ–∫–µ–ª–µ–π",
    "–ú–∏—Ñ–∏—á–µ—Å–∫–æ–µ —è–π—Ü–æ": "8–ú —à–µ–∫–µ–ª–µ–π",
    "–ë–∞–≥ —è–π—Ü–æ": "50–ú —à–µ–∫–µ–ª–µ–π",
    "–†–∞–π—Å–∫–æ–µ —è–π—Ü–æ": "50–ú —à–µ–∫–µ–ª–µ–π",
    "–ú–∞—Å—Ç–µ—Ä —Ä–∞–∑–±—Ä—ã–∑–≥–∏–≤–∞—Ç–µ–ª—å": "10–ú —à–µ–∫–µ–ª–µ–π"
}

ALLOWED_ITEMS_CHANNEL = [
    "–°–∞—Ö–∞—Ä–Ω–æ–µ —è–±–ª–æ–∫–æ", "–ö–∞–∫–∞–æ", "–ü–µ—Ä–µ—Ü", "–ë–æ–ª–≥–∞—Ä—Å–∫–∏–π –ø–µ—Ä–µ—Ü", "–ë–æ–±–æ–≤—ã–π —Å—Ç–µ–±–µ–ª—å",
    "–ú–∞–Ω–≥–æ", "–î—Ä–∞–∫–æ–Ω–∏–π —Ñ—Ä—É–∫—Ç", "–ö–∏–≤–∏", "–ö–∞–∫—Ç—É—Å–æ–≤—ã–π –∏–Ω–∂–∏—Ä", "–ú—É—à–º—É–ª–∞",
    "–§–µ–π—Ö–æ–∞", "–ì—Ä–∏–±", "–ú–∏—Ñ–∏—á–µ—Å–∫–æ–µ —è–π—Ü–æ", "–ú–∞—Å—Ç–µ—Ä —Ä–∞–∑–±—Ä—ã–∑–≥–∏–≤–∞—Ç–µ–ª—å", "–ë–∞–≥ —è–π—Ü–æ", "–†–∞–π—Å–∫–æ–µ —è–π—Ü–æ"
]
ALLOWED_ITEMS_DM = list(ITEM_TRANSLATE.values())

last_update_time = 0
update_lock = asyncio.Lock()
pending_broadcast = {}

def normalize_item_name(name: str) -> str:
    if not name:
        return ""
    name = re.sub(r'\s*x\d+\s*$', '', name, flags=re.IGNORECASE)
    name = re.sub(r'\s+', ' ', name.strip())
    name_lower = name.lower()
    for eng_name in ITEM_TRANSLATE:
        if eng_name.lower() == name_lower:
            return eng_name
    return name.title()

def normalize_stock(stocks: Dict) -> Dict:
    normalized = {}
    for section, items in stocks.items():
        normalized[section] = sorted(
            [
                {
                    "name": item["name"].strip().lower(),
                    "emoji": ''.join(sorted(item["emoji"].strip())),
                    "qty": item["qty"].strip().lower()
                }
                for item in items
            ],
            key=lambda x: x["name"]
        )
    return normalized

def get_stock_hash(stocks: Dict) -> str:
    norm_stocks = normalize_stock(stocks)
    stock_str = json.dumps(norm_stocks, sort_keys=True, ensure_ascii=False)
    return hashlib.md5(stock_str.encode('utf-8')).hexdigest()

def get_period_block(section: str) -> str:
    now = datetime.now(timezone(timedelta(hours=3)))  # EEST
    period_min = SECTION_PERIOD.get(section, 30)
    block_start = now.replace(second=0, microsecond=0)
    minute = (block_start.minute // period_min) * period_min
    block_start = block_start.replace(minute=minute)
    block_end = block_start + timedelta(minutes=period_min)
    period_str = block_end.strftime("%H:%M:%S")
    logger.debug(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –ø–µ—Ä–∏–æ–¥ –¥–ª—è {section}: {period_str} (—Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {now}, period_min: {period_min}, block_start: {block_start})")
    return period_str

def get_stock(bot: Bot) -> Dict:
    max_retries = 5
    base_timeout = 15
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
        "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8",
        "Accept-Language": "en-US,en;q=0.5",
        "Cache-Control": "no-cache",
    }
    cookies = {"cookieConsent": "accepted"}
    
    ignored_items = []
    for attempt in range(1, max_retries + 1):
        try:
            scraper = cloudscraper.create_scraper()
            logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt}: –ó–∞–ø—Ä–æ—Å –∫ {STOCK_URL}")
            response = scraper.get(STOCK_URL, timeout=base_timeout + attempt * 5, headers=headers, cookies=cookies)
            response.raise_for_status()
            logger.info(f"HTTP —Å—Ç–∞—Ç—É—Å: {response.status_code}")
            with open("response.html", "w", encoding="utf-8") as f:
                f.write(response.text)
            logger.debug(f"HTML —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ response.html (–ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤): {response.text[:500]}...")
            
            soup = BeautifulSoup(response.text, "html.parser")
            if not soup.find_all("h2"):
                logger.warning(f"HTML –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–µ–∫—Ü–∏–π h2 –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt}")
                if attempt < max_retries:
                    time.sleep(2 ** attempt)
                    continue
                logger.error("HTML –ø—É—Å—Ç–æ–π –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫")
                return {section: [] for section in SECTION_LIST}
            
            stocks = {section: [] for section in SECTION_LIST}
            ignored_items = []
            for h2 in soup.find_all("h2"):
                section_name = h2.get_text(strip=True).upper()
                if section_name not in SECTION_LIST:
                    logger.debug(f"–ü—Ä–æ–ø—É—â–µ–Ω–∞ —Å–µ–∫—Ü–∏—è: {section_name}")
                    continue
                ul = h2.find_next(lambda tag: tag.name == "ul")
                if not ul:
                    logger.debug(f"–°–ø–∏—Å–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Å–µ–∫—Ü–∏–∏: {section_name}")
                    continue
                formatted_items = []
                for li in ul.find_all("li"):
                    text = li.get_text(strip=True, separator=" ")
                    logger.debug(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞: {text}")
                    qty_match = re.search(r'\s*x(\d+)\s*$', text, re.IGNORECASE)
                    qty = qty_match.group(1) if qty_match else ""
                    name = re.sub(r'\s*x\d+\s*$', '', text, flags=re.IGNORECASE).strip()
                    if not name:
                        logger.debug("–ò–º—è –ø—Ä–µ–¥–º–µ—Ç–∞ –ø—É—Å—Ç–æ–µ, –ø—Ä–æ–ø—É—Å–∫")
                        continue
                    spans = li.find_all("span")
                    if len(spans) >= 1:
                        name = spans[0].get_text(strip=True)
                        logger.debug(f"–ò–º—è –∏–∑ span: {name}")
                        if len(spans) >= 2:
                            qty = spans[1].get_text(strip=True).replace("x", "").strip()
                            logger.debug(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑ span: {qty}")
                    normalized_name = normalize_item_name(name)
                    logger.debug(f"–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –∏–º—è: {normalized_name}")
                    translated_name = ITEM_TRANSLATE.get(normalized_name, None)
                    if translated_name is None or translated_name not in ALLOWED_ITEMS_DM:
                        logger.debug(f"–ü—Ä–µ–¥–º–µ—Ç {normalized_name} –Ω–µ –≤ ALLOWED_ITEMS_DM, –ø—Ä–æ–ø—É—Å–∫")
                        ignored_items.append(normalized_name)
                        continue
                    logger.debug(f"–ü–µ—Ä–µ–≤–µ–¥—ë–Ω–Ω–æ–µ –∏–º—è: {translated_name}")
                    emoji = ITEM_EMOJI.get(translated_name, SECTION_EMOJI.get(section_name, ""))
                    color_emoji = egg_colors.get(translated_name, "")
                    item_data = {
                        "name": translated_name,
                        "emoji": f"{emoji}{color_emoji}",
                        "qty": f"x{qty}" if qty else ""
                    }
                    formatted_items.append(item_data)
                    logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω –ø—Ä–µ–¥–º–µ—Ç: {translated_name}, —ç–º–æ–¥–∑–∏: {emoji}{color_emoji}, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {qty}")
                stocks[section_name] = formatted_items
            
            logger.info(f"–ò–∑–≤–ª–µ—á—ë–Ω–Ω—ã–π —Å—Ç–æ–∫: {json.dumps(stocks, ensure_ascii=False, indent=2)}")
            if ignored_items:
                logger.warning(f"–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã: {', '.join(set(ignored_items))}")
            if not any(stocks[section] for section in SELECTABLE_SECTIONS):
                logger.warning(f"–ü—É—Å—Ç–æ–π —Å—Ç–æ–∫ –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt}")
                if attempt < max_retries:
                    time.sleep(2 ** attempt)
                    continue
                logger.error("–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –¥–∞–ª–∏ –ø—É—Å—Ç–æ–π —Å—Ç–æ–∫")
                prev_stock = load_json_file(PREV_STOCK_FILE, {section: [] for section in SECTION_LIST})
                if any(prev_stock[section] for section in SELECTABLE_SECTIONS):
                    logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å—Ç–æ–∫")
                    return prev_stock
                logger.error("–ü—Ä–µ–¥—ã–¥—É—â–∏–π —Å—Ç–æ–∫ —Ç–∞–∫–∂–µ –ø—É—Å—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –ø—É—Å—Ç–æ–π —Å—Ç–æ–∫")
                return {section: [] for section in SECTION_LIST}
            logger.info(f"–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω —Å—Ç–æ–∫ –∑–∞ –ø–æ–ø—ã—Ç–∫—É {attempt}")
            return stocks
        except Timeout as e:
            logger.warning(f"–¢–∞–π–º–∞—É—Ç –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt}: {str(e)}")
            if attempt < max_retries:
                time.sleep(2 ** attempt)
                continue
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–æ–∫ –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫: {str(e)}")
            prev_stock = load_json_file(PREV_STOCK_FILE, {section: [] for section in SECTION_LIST})
            if any(prev_stock[section] for section in SELECTABLE_SECTIONS):
                logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å—Ç–æ–∫")
                return prev_stock
            return {section: [] for section in SECTION_LIST}
        except HTTPError as e:
            logger.warning(f"HTTP –æ—à–∏–±–∫–∞ –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt}: {str(e)}")
            if attempt < max_retries:
                time.sleep(2 ** attempt)
                continue
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–æ–∫ –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫: {str(e)}")
            return {section: [] for section in SECTION_LIST}
        except ConnectionError as e:
            logger.warning(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt}: {str(e)}")
            if attempt < max_retries:
                time.sleep(2 ** attempt)
                continue
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–æ–∫ –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫: {str(e)}")
            return {section: [] for section in SECTION_LIST}
        except Exception as e:
            logger.warning(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt}: {str(e)}")
            if attempt < max_retries:
                time.sleep(2 ** attempt)
                continue
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–æ–∫ –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫: {str(e)}")
            return {section: [] for section in SECTION_LIST}

def load_json_file(path: str, default: Dict) -> Dict:
    try:
        if not os.path.exists(path):
            logger.info(f"–§–∞–π–ª {path} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —Å –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            save_json_file(path, default)
        with open(path, "r", encoding="utf-8") as f:
            data = json.load(f)
            logger.debug(f"–ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª {path}: {data}")
            if path == MSG_ID_FILE:
                for key in default:
                    if key not in data or not isinstance(data[key], list):
                        data[key] = []
            elif path == USERS_FILE:
                if "users" not in data or not isinstance(data["users"], list):
                    data = {"users": default.get("users", [])}
            elif path == LAST_SENT_PERIODS_FILE:
                if not isinstance(data, dict):
                    data = default
            return data
    except PermissionError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ {path}: {str(e)}")
        return default
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {path}: {str(e)}, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        return default

def save_json_file(path: str, data: Dict):
    try:
        with open(path, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        logger.debug(f"–°–æ—Ö—Ä–∞–Ω—ë–Ω —Ñ–∞–π–ª {path}: {data}")
    except PermissionError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ {path}: {str(e)}")
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è {path}: {str(e)}")
        raise

async def clean_log_file():
    while True:
        try:
            logger.info("–û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤")
            with open('sticker_log.log', 'w', encoding='utf-8') as f:
                f.write("")
            logger.info("–§–∞–π–ª –ª–æ–≥–æ–≤ –æ—á–∏—â–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤: {str(e)}")
        await asyncio.sleep(LOG_CLEAN_INTERVAL)

async def check_bot_permissions(bot: Bot, chat_id: str) -> bool:
    try:
        bot_member = await bot.get_chat_member(chat_id=chat_id, user_id=bot.id)
        logger.debug(f"–ü—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ {chat_id}: {bot_member}")
        if bot_member.status not in ['administrator', 'creator']:
            logger.error(f"–ë–æ—Ç –Ω–µ –∞–¥–º–∏–Ω –≤ {chat_id}")
            return False
        if not bot_member.can_post_messages:
            logger.error(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –≤ {chat_id}")
            return False
        logger.info(f"–ë–æ—Ç –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –≤ {chat_id}")
        return True
    except TelegramError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –≤ {chat_id}: {str(e)}")
        return False

async def send_sticker_stock(bot: Bot, chat_id: str, stocks: Dict, last_msgs: Dict, last_sent_periods: Dict, is_full_stock: bool = False) -> Dict:
    logger.debug(f"–ù–∞—á–∞–ª–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å—Ç–æ–∫–∞ –≤ {chat_id}, is_full_stock={is_full_stock}")
    
    message_lines = []
    if is_full_stock:
        message_lines.append("üìã **–ü–æ–ª–Ω—ã–π —Å—Ç–æ–∫**")
    
    for section in SELECTABLE_SECTIONS:
        items = stocks.get(section, [])
        logger.debug(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏—é {section}: {items}")
        if not items:
            logger.debug(f"–ù–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ —Å–µ–∫—Ü–∏–∏ {section}, –ø—Ä–æ–ø—É—Å–∫")
            continue
        allowed_items = ALLOWED_ITEMS_DM if is_full_stock else ALLOWED_ITEMS_CHANNEL
        filtered_items = [item for item in items if item['name'] in allowed_items]
        if not filtered_items:
            logger.debug(f"–ù–µ—Ç –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {chat_id} –≤ —Å–µ–∫—Ü–∏–∏ {section}: {items}")
            continue
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è EGG STOCK –≤ @sbtdrasik
        if chat_id == STOCK_CHANNEL_ID and section == "EGG STOCK":
            current_period = get_period_block(section)
            last_period = last_sent_periods.get(section, "")
            logger.debug(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è EGG STOCK: —Ç–µ–∫—É—â–∏–π={current_period}, –ø–æ—Å–ª–µ–¥–Ω–∏–π={last_period}")
            if last_period == current_period:
                logger.debug(f"–ü—Ä–æ–ø—É—Å–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ EGG STOCK –≤ {chat_id}: –ø–µ—Ä–∏–æ–¥ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è ({last_period})")
                continue
        
        section_key = section.lower().replace(" ", "_")
        translated_section = SECTION_TRANSLATE.get(section, section)
        
        try:
            section_lines = [f"**{translated_section}**"]
            section_lines.append(f"‚åõ **–ü—Ä–æ–ø–∞–¥—ë—Ç –≤:** {get_period_block(section)}")
            for item in filtered_items:
                qty = item['qty'].replace("x", "").strip() or "1"
                qty_text = "–æ–¥–∏–Ω" if qty == "1" else qty
                emoji = item['emoji']
                item_lines = [f"{emoji} **{item['name']}**", f"‚ú® **–í –Ω–∞–ª–∏—á–∏–∏:** {qty_text}"]
                price = ITEM_PRICES.get(item['name'])
                if price:
                    item_lines.append(f"üí∞ **–¶–µ–Ω–∞:** {price}")
                section_lines.extend(item_lines)
                section_lines.append("")  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤
            if is_full_stock:
                message_lines.extend(section_lines)
            else:
                message_lines = section_lines
                message_lines.append("**‚ù§ –ó–∞—Ö–≤–∞—Ç–∏–ª ‚Äì —Ä–∞–¥–æ—Å—Ç—å!**")
                message_lines.append("**üëç –£–ø—É—Å—Ç–∏–ª ‚Äì —á—ë—Ä—Ç...**")
                
                keyboard = [
                    [
                        InlineKeyboardButton("ü§ñ –ó–∞–π—Ç–∏ –≤ –±–æ—Ç–∞", url="https://t.me/Stockrasik_bot"),
                        InlineKeyboardButton("üöÄ –ë—É—Å—Ç–Ω—É—Ç—å –∫–∞–Ω–∞–ª", url="https://t.me/boost/sbtdrasik")
                    ]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                message_text = "\n".join(message_lines)
                msg = await bot.send_message(
                    chat_id=chat_id,
                    text=message_text,
                    parse_mode="Markdown",
                    reply_markup=reply_markup
                )
                last_msgs[section_key] = last_msgs.get(section_key, []) + [msg.message_id]
                last_sent_periods[section] = get_period_block(section)
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è {section} –≤ {chat_id}, ID: {msg.message_id}, –ø–µ—Ä–∏–æ–¥: {last_sent_periods[section]}")
                
        except TelegramError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è {section} –≤ {chat_id}: {str(e)}")
    
    if is_full_stock and message_lines:
        message_lines.append("**‚ù§ –ó–∞—Ö–≤–∞—Ç–∏–ª ‚Äì —Ä–∞–¥–æ—Å—Ç—å!**")
        message_lines.append("**üëç –£–ø—É—Å—Ç–∏–ª ‚Äì —á—ë—Ä—Ç...**")
        keyboard = [
            [
                InlineKeyboardButton("ü§ñ –ó–∞–π—Ç–∏ –≤ –±–æ—Ç–∞", url="https://t.me/Stockrasik_bot"),
                InlineKeyboardButton("üöÄ –ë—É—Å—Ç–Ω—É—Ç—å –∫–∞–Ω–∞–ª", url="https://t.me/boost/sbtdrasik")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        message_text = "\n".join(message_lines)
        try:
            msg = await bot.send_message(
                chat_id=chat_id,
                text=message_text,
                parse_mode="Markdown",
                reply_markup=reply_markup
            )
            last_msgs['full_stock'] = last_msgs.get('full_stock', []) + [msg.message_id]
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª–Ω—ã–π —Å—Ç–æ–∫ –≤ {chat_id}, ID: {msg.message_id}")
        except TelegramError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª–Ω–æ–≥–æ —Å—Ç–æ–∫–∞ –≤ {chat_id}: {str(e)}")
    
    try:
        save_json_file(LAST_SENT_PERIODS_FILE, last_sent_periods)
        logger.debug(f"–§–∞–π–ª {LAST_SENT_PERIODS_FILE} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {last_sent_periods}")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å {LAST_SENT_PERIODS_FILE}: {str(e)}")
    save_json_file(MSG_ID_FILE, last_msgs)
    return last_msgs

async def send_stock_to_user(bot: Bot, user_id: str, section: str = None):
    try:
        stocks = load_json_file(PREV_STOCK_FILE, {section: [] for section in SECTION_LIST})
        message_lines = []
        
        if section:
            items = stocks.get(section, [])
            if not items:
                await bot.send_message(user_id, f"üì≠ –°–µ–∫—Ü–∏—è {SECTION_TRANSLATE.get(section, section)} –ø—É—Å—Ç–∞.")
                return
            message_lines.append(f"üìã **{SECTION_TRANSLATE.get(section, section)}**")
            message_lines.append(f"‚åõ **–ü—Ä–æ–ø–∞–¥—ë—Ç –≤:** {get_period_block(section)}")
            for item in items:
                if item['name'] in ALLOWED_ITEMS_DM:
                    qty = item['qty'].replace("x", "").strip() or "1"
                    qty_text = "–æ–¥–∏–Ω" if qty == "1" else qty
                    emoji = item['emoji']
                    item_lines = [f"{emoji} **{item['name']}**", f"‚ú® –í –Ω–∞–ª–∏—á–∏–∏: {qty_text}"]
                    price = ITEM_PRICES.get(item['name'])
                    if price:
                        item_lines.append(f"üí∞ –¶–µ–Ω–∞: {price}")
                    message_lines.extend(item_lines)
                    message_lines.append("")
        else:
            message_lines.append("üìã **–ü–æ–ª–Ω—ã–π —Å—Ç–æ–∫**")
            for section in SELECTABLE_SECTIONS:
                items = stocks.get(section, [])
                if items:
                    message_lines.append(f"\n**{SECTION_TRANSLATE.get(section, section)}**")
                    message_lines.append(f"‚åõ **–ü—Ä–æ–ø–∞–¥—ë—Ç –≤:** {get_period_block(section)}")
                    for item in items:
                        if item['name'] in ALLOWED_ITEMS_DM:
                            qty = item['qty'].replace("x", "").strip() or "1"
                            qty_text = "–æ–¥–∏–Ω" if qty == "1" else qty
                            emoji = item['emoji']
                            item_lines = [f"{emoji} **{item['name']}**", f"‚ú® –í –Ω–∞–ª–∏—á–∏–∏: {qty_text}"]
                            price = ITEM_PRICES.get(item['name'])
                            if price:
                                item_lines.append(f"üí∞ –¶–µ–Ω–∞: {price}")
                            message_lines.extend(item_lines)
                            message_lines.append("")
            if len(message_lines) == 1:
                message_lines.append("üì≠ –°—Ç–æ–∫ –ø—É—Å—Ç.")
        
        keyboard = [
            [
                InlineKeyboardButton("üå± –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–º–µ–Ω–∞", callback_data="check_seeds"),
                InlineKeyboardButton("‚öôÔ∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã", callback_data="check_gear"),
                InlineKeyboardButton("ü•ö –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —è–π—Ü–∞", callback_data="check_eggs")
            ],
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–æ–∫", callback_data="update_stock")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message_text = "\n".join(message_lines)
        await bot.send_message(user_id, message_text, parse_mode="Markdown", reply_markup=reply_markup)
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å—Ç–æ–∫ ({section or '–ø–æ–ª–Ω—ã–π'}) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    except TelegramError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {str(e)}")
        if "blocked by user" in str(e).lower():
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {str(e)}")

async def start(update: Update, context):
    user_id = str(update.effective_user.id)
    chat_id = str(update.effective_chat.id)
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç {user_id} –≤ —á–∞—Ç–µ {chat_id}")
    try:
        users = load_json_file(USERS_FILE, {"users": ADMIN_IDS})
        if user_id not in users["users"]:
            users["users"].append(user_id)
            save_json_file(USERS_FILE, users)
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤ {USERS_FILE}")
        await update.message.reply_text(
            f"üëã –ü—Ä–∏–≤–µ—Ç! –ë–æ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Å—Ç–æ–∫ –≤ {STOCK_CHANNEL_ID}. –ü—Ä–æ–≤–µ—Ä—è–π —Å—Ç–æ–∫ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ."
        )
        await send_stock_to_user(context.bot, user_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è {user_id}: {str(e)}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def users(update: Update, context):
    user_id = str(update.effective_user.id)
    chat_id = str(update.effective_chat.id)
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /users –æ—Ç {user_id} –≤ —á–∞—Ç–µ {chat_id}")
    try:
        if chat_id != ALLOWED_GROUP_ID:
            await update.message.reply_text(f"‚õî –ö–æ–º–∞–Ω–¥–∞ /users —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ —Å ID {ALLOWED_GROUP_ID}.")
            return
        if user_id not in ADMIN_IDS:
            await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
            return
        users = load_json_file(USERS_FILE, {"users": ADMIN_IDS})
        await update.message.reply_text(f"üìã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {len(users['users'])}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /users –¥–ª—è {user_id}: {str(e)}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def rasik(update: Update, context):
    user_id = str(update.effective_user.id)
    chat_id = str(update.effective_chat.id)
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /rasik –æ—Ç {user_id} –≤ —á–∞—Ç–µ {chat_id}")
    try:
        if chat_id != ALLOWED_GROUP_ID:
            await update.message.reply_text(f"‚õî –ö–æ–º–∞–Ω–¥–∞ /rasik —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ —Å ID {ALLOWED_GROUP_ID}.")
            return
        if user_id not in ADMIN_IDS:
            await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
            return
        pending_broadcast[user_id] = {"timestamp": time.time()}
        await update.message.reply_text("üì§ –û—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /rasik –¥–ª—è {user_id}: {str(e)}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def handle_broadcast_message(update: Update, context):
    user_id = str(update.effective_user.id)
    chat_id = str(update.effective_chat.id)
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç {user_id} –≤ —á–∞—Ç–µ {chat_id}")
    try:
        if user_id not in pending_broadcast:
            logger.debug(f"–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è {user_id}")
            return
        if chat_id != ALLOWED_GROUP_ID:
            await update.message.reply_text(f"‚õî –†–∞—Å—Å—ã–ª–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ —Å ID {ALLOWED_GROUP_ID}.")
            return
        if time.time() - pending_broadcast[user_id]["timestamp"] > 300:
            await update.message.reply_text("‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –ò—Å–ø–æ–ª—å–∑—É–π /rasik –∑–∞–Ω–æ–≤–æ.")
            del pending_broadcast[user_id]
            return
        pending_broadcast[user_id]["message"] = update.message
        keyboard = [[InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data=f"confirm_broadcast_{user_id}")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("üì§ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.", reply_markup=reply_markup)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç {user_id}: {str(e)}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def broadcast_callback(update: Update, context):
    user_id = str(update.effective_user.id)
    query = update.callback_query
    logger.debug(f"Callback –æ—Ç {user_id}: {query.data}")
    try:
        if user_id not in ADMIN_IDS:
            await query.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
            return
        if not query.data.startswith("confirm_broadcast_"):
            await query.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π callback.")
            return
        if user_id not in pending_broadcast or "message" not in pending_broadcast[user_id]:
            await query.answer("‚ùå –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
            return
        users = load_json_file(USERS_FILE, {"users": ADMIN_IDS})
        message = pending_broadcast[user_id]["message"]
        success_count = 0
        for target_id in users["users"]:
            try:
                await message.forward(chat_id=target_id)
                success_count += 1
                logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id}")
                await asyncio.sleep(0.1)
            except TelegramError as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id}: {str(e)}")
                if "blocked by user" not in str(e).lower():
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id}: {str(e)}")
        await query.message.reply_text(f"üì¨ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {success_count} –∏–∑ {len(users['users'])} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
        await query.answer()
        del pending_broadcast[user_id]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è {user_id}: {str(e)}")
        await query.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await query.answer()

async def stock_callback(update: Update, context):
    user_id = str(update.effective_user.id)
    query = update.callback_query
    logger.debug(f"Callback –æ—Ç {user_id}: {query.data}")
    try:
        if query.data == "check_seeds":
            await send_stock_to_user(context.bot, user_id, "SEEDS STOCK")
        elif query.data == "check_gear":
            await send_stock_to_user(context.bot, user_id, "GEAR STOCK")
        elif query.data == "check_eggs":
            await send_stock_to_user(context.bot, user_id, "EGG STOCK")
        elif query.data == "update_stock":
            await send_stock_to_user(context.bot, user_id)
        await query.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback –¥–ª—è {user_id}: {str(e)}")
        await query.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

async def update_stock(app: Application):
    global last_update_time
    async with update_lock:
        current_time = time.time()
        logger.debug(f"–ù–∞—á–∞–ª–æ update_stock, —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_time}, –ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {last_update_time}")
        if current_time - last_update_time < STOCK_CHECK_INTERVAL - 5:
            logger.debug(f"–ü—Ä–æ–ø—É—â–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞: —Å–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ (–ø—Ä–æ—à–ª–æ {current_time - last_update_time:.1f} —Å–µ–∫)")
            return
        last_update_time = current_time
        bot = app.bot
        start_time = time.time()
        logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–∫–∞ –Ω–∞—á–∞—Ç–∞")
        try:
            stocks = get_stock(bot)
            logger.debug(f"–ü–æ–ª—É—á–µ–Ω —Å—Ç–æ–∫: {json.dumps(stocks, ensure_ascii=False)}")
            if not any(stocks[section] for section in SELECTABLE_SECTIONS):
                logger.warning("–°—Ç–æ–∫ –ø—É—Å—Ç–æ–π, –ø—Ä–æ–ø—É—Å–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
                return
            current_hash = get_stock_hash(stocks)
            prev_stock = load_json_file(PREV_STOCK_FILE, {section: [] for section in SECTION_LIST})
            prev_hash = get_stock_hash(prev_stock)
            logger.debug(f"–¢–µ–∫—É—â–∏–π —Å—Ç–æ–∫ (—Ö—ç—à: {current_hash}): {json.dumps(normalize_stock(stocks), ensure_ascii=False)}")
            logger.debug(f"–ü—Ä–µ–¥—ã–¥—É—â–∏–π —Å—Ç–æ–∫ (—Ö—ç—à: {prev_hash}): {json.dumps(normalize_stock(prev_stock), ensure_ascii=False)}")
            if current_hash == prev_hash:
                logger.info("–°—Ç–æ–∫ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, –ø—Ä–æ–ø—É—Å–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
                return
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ @sbtdrasik (–ø–æ —Å–µ–∫—Ü–∏—è–º, –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π —Å—Ç–æ–∫, EGG STOCK —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å–º–µ–Ω–µ –ø–µ—Ä–∏–æ–¥–∞)
            if await check_bot_permissions(bot, STOCK_CHANNEL_ID):
                last_msgs = load_json_file(MSG_ID_FILE, {section.lower().replace(" ", "_"): [] for section in SELECTABLE_SECTIONS})
                last_sent_periods = load_json_file(LAST_SENT_PERIODS_FILE, {section: "" for section in SELECTABLE_SECTIONS})
                logger.debug(f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã last_sent_periods: {last_sent_periods}")
                last_msgs = await send_sticker_stock(bot, STOCK_CHANNEL_ID, stocks, last_msgs, last_sent_periods, is_full_stock=False)
                save_json_file(MSG_ID_FILE, last_msgs)
                try:
                    save_json_file(LAST_SENT_PERIODS_FILE, last_sent_periods)
                    logger.debug(f"–§–∞–π–ª {LAST_SENT_PERIODS_FILE} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ @sbtdrasik: {last_sent_periods}")
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å {LAST_SENT_PERIODS_FILE} –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ @sbtdrasik: {str(e)}")
            else:
                logger.error("–ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞ –≤ @sbtdrasik: –±–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤")
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ @autostockgag (–ø–æ–ª–Ω—ã–π —Å—Ç–æ–∫)
            if await check_bot_permissions(bot, FULL_STOCK_CHANNEL_ID):
                last_msgs = load_json_file(MSG_ID_FILE, {section.lower().replace(" ", "_"): [] for section in SELECTABLE_SECTIONS})
                last_sent_periods = load_json_file(LAST_SENT_PERIODS_FILE, {section: "" for section in SELECTABLE_SECTIONS})
                last_msgs = await send_sticker_stock(bot, FULL_STOCK_CHANNEL_ID, stocks, last_msgs, last_sent_periods, is_full_stock=True)
                save_json_file(MSG_ID_FILE, last_msgs)
                try:
                    save_json_file(LAST_SENT_PERIODS_FILE, last_sent_periods)
                    logger.debug(f"–§–∞–π–ª {LAST_SENT_PERIODS_FILE} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ @autostockgag: {last_sent_periods}")
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å {LAST_SENT_PERIODS_FILE} –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ @autostockgag: {str(e)}")
            else:
                logger.error("–ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞ –≤ @autostockgag: –±–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤")
            save_json_file(PREV_STOCK_FILE, stocks)
            logger.info(f"–°—Ç–æ–∫ –æ–±–Ω–æ–≤–ª—ë–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞ {time.time() - start_time:.2f} —Å–µ–∫")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–æ–∫–∞: {str(e)}")
            return

async def main():
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞")
    if not TELEGRAM_BOT_TOKEN or "YOUR_STICKER_BOT_TOKEN_HERE" in TELEGRAM_BOT_TOKEN:
        logger.error("–¢–æ–∫–µ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω")
        return
    try:
        app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
        app.add_handler(CommandHandler("start", start))
        app.add_handler(CommandHandler("users", users))
        app.add_handler(CommandHandler("rasik", rasik))
        app.add_handler(CallbackQueryHandler(broadcast_callback, pattern="^confirm_broadcast_"))
        app.add_handler(CallbackQueryHandler(stock_callback, pattern="^(check_seeds|check_gear|check_eggs|update_stock)$"))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND & filters.User(user_id=ADMIN_IDS) & filters.Chat(chat_id=int(ALLOWED_GROUP_ID)), handle_broadcast_message))
        logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
        
        asyncio.create_task(clean_log_file())
        
        async with app:
            await app.initialize()
            await app.start()
            await app.updater.start_polling(drop_pending_updates=True)
            logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
            await update_stock(app)
            while True:
                try:
                    await update_stock(app)
                    await asyncio.sleep(STOCK_CHECK_INTERVAL)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ update_stock: {str(e)}")
                    await asyncio.sleep(60)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {str(e)}")
        await asyncio.sleep(60)

if __name__ == "__main__":
    asyncio.run(main())
